#!/usr/bin/env bash

# cd into a directory and list files.
function cd_ls() {
    if [[ -z $1 ]]
    then
        cd ; ls
    else
        cd "$1"; ls
    fi
}

# Create a new directory and enter it.
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Create a new directory with an __init__.py file.
function pymkdir() {
    mkdir "$@"
    touch "$@/__init__.py"
}

# Create a new directory with an __init__.py file and enter it.
function pymkd() {
    mkd $@
    touch __init__.py
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components|__pycache__|.*cache' --dirsfirst "$@" | less -FRNX;
}

# Clean up Python compiled files
function pyclean() {
    find . | grep -E "(.mypy_cache|__pycache__|\.pyc|\.pyo$)" | xargs rm -rf
}

# Use codivim module.
function codi() {
    local syntax="${1:-python}"
    shift
    nvim -c \
        "let g:startify_disable_at_vimenter = 1 |\
        set bt=nofile ls=0 noru nonu nornu |\
        hi ColorColumn ctermbg=NONE |\
        hi VertSplit ctermbg=NONE |\
        hi NonText ctermfg=0 |\
        Codi $syntax" "$@"
}

# Install R packages easily from the command line
function R_install() {
    R -e "install.packages('$@', repos='http://cran.rstudio.com/')"
}

# Search files for key phrase.
function search() {
    find ${2:-.} -type f \
        -not -path '*.git/*' \
        -not -path '*.*cache/*' \
        -not -path '*__pycache__/*'| xargs grep "$1"
}

# Close a git repo using SSH.
function Gclone() {
    git clone --recurse-submodules git@github.com:$1.git
}

# Quickly cleanup cruft from docker machine.
function docker_cleanup() {
    old_containers=$(docker ps -a -q)
    if [[ ! -z $old_containers ]]; then
        docker rm $old_containers
    fi
    old_images=$(docker images | grep "^<none" | tr -s ' ' | cut -d' ' -f 3)
    if [[ ! -z $old_images ]]; then
        docker rmi $old_images
    fi
    docker volume prune -f
}

# Update all files.
function update_all() {
    if [[ `uname` != 'Darwin' ]]; then
        sudo bash -c 'for i in update {,dist-}upgrade auto{remove,clean}; do apt-get $i -y; done'
    else
        brew update
    fi
}

# Check if cuda available
function check_cuda() {
    python -c 'import torch; print("Cuda devices available:", torch.cuda.device_count())'
}

function utc_now() {
    python -c 'from datetime import datetime as dt; print(dt.utcnow())'
}
